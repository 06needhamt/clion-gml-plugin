plugins {
    id "org.jetbrains.grammarkit" version "2021.1.3"
    id 'org.jetbrains.kotlin.jvm' version '1.5.10'
    id 'org.jetbrains.intellij' version '1.1.4'
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceSets.main.java.srcDirs 'src/main/gen'

repositories {
    mavenCentral()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version = '2021.2'
}
patchPluginXml {
    changeNotes = """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}

apply plugin: 'org.jetbrains.grammarkit'

// import is optional to make task creation easier
import org.jetbrains.grammarkit.tasks.*

grammarKit {
    // version of IntelliJ patched JFlex (see the link below), Default is 1.7.0-1
    jflexRelease = '1.7.0-1'

    // tag or short commit hash of Grammar-Kit to use (see link below). Default is 2020.3.1
    grammarKitRelease = '6452fde524'
}
task generateGMLLexer(type: GenerateLexer) {
    // source flex file
    source = "src/main/resources/_GMLLexer.flex"

    // target directory for lexer
    targetDir = "src/main/gen/org/serenityos/gml/plugin/core/psi"

    // target classname, target file will be targetDir/targetClass.java
    targetClass = "_GMLLexer.java"

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}

task generateGMLParser(type: GenerateParser) {
    // source bnf file
    source = "src/main/resources/gml.bnf"

    // task-specific root for the generated files. Default: none
    targetRoot = 'src/main/gen'

    // path to a parser file, relative to the targetRoot
    pathToParser = 'org/serenityos/gml/plugin/parser/GMLParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = 'org/serenityos/gml/plugin/core/psi'

    // if set, the plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true
}

test {
    useJUnitPlatform()
}