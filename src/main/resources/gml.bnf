{
  tokens = [
    space='regexp:\s+'
    string = "regexp:\"[^\"]*\"|'[^']*'"
    number = "regexp:(\+|\-)?\p{Digit}*"
    id = "regexp:\p{Alpha}\w*"
    classprefix = "@"
    comma = ","
    colon = ":"
    brace1 = "{"
    brace2 = "}"
    brack1 = "["
    brack2 = "]"
    newline = "\n"
  ]
  extends("object|gml")=value

  parserClass="org.serenityos.gml.plugin.parser.GMLParser"
  parserUtilClass="org.intellij.grammar.parser.GeneratedParserUtilBase"
  // parserUtilClass="org.serenityos.gml.plugin.parser.GMLParserUtil"
   parserImports=[ "static com.intellij.lang.WhitespacesBinders.*" ]

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="GML"
  psiImplClassSuffix="Impl"
  psiPackage="org.serenityos.gml.plugin.core.psi"
  psiImplPackage="org.serenityos.gml.plugin.core.psi"

  elementTypeHolderClass="org.serenityos.gml.plugin.core.psi.GMLTypes"
  elementTypeClass="org.serenityos.gml.plugin.core.psi.GMLElementType"
  tokenTypeClass="org.serenityos.gml.plugin.core.psi.GMLTokenType"
}

root ::= gml
gml ::= object   { hooks=[wsBinders="null, null"] }
value ::= string | number {hooks=[leftBinder="GREEDY_LEFT_BINDER"]}

whitespace ::= " " | "\t" | "\n" | comment;


private item ::= gml {recoverWhile=recover}
object ::= (prop | whitespace)* {pin(".*")=1 extends=gml}
prop ::= classprefix name '::' name '{' [!'}' (prop | name ':' value) *] '}' {pin=1 recoverWhile=recover}
name ::= id | string {name="name" hooks=[rightBinder="GREEDY_RIGHT_BINDER"]}
private recover ::= !(',' | ']' | '}' | '[' | '{' |)