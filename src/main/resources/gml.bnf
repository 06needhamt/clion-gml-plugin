{
  tokens = [
    space='regexp:\s+'
    string = "regexp:\"[^\"]*\"|'[^']*'"
    number = "regexp:(-)?\p{Digit}+(.\p{Digit})*"
    key = "regexp:\p{Alpha}\w*"
    classprefix = "@"
    classname = "regexp:(\p{Alpha}\w*)::(\p{Alpha}\w*)"
    comma = ","
    colon = ":"
    dot = "."
    brace1 = "{"
    brace2 = "}"
    brack1 = "["
    brack2 = "]"
    paren1 = "("
    paren2 = ")"
    newline = "\n"
  ]
  extends("object|gml")=value

  parserClass="org.serenityos.gml.plugin.parser.GMLParser"
  parserUtilClass="org.intellij.grammar.parser.GeneratedParserUtilBase"
  parserImports=[ "static com.intellij.lang.WhitespacesBinders.*" ]

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="GML"
  psiImplClassSuffix="Impl"
  psiPackage="org.serenityos.gml.plugin.core.psi"
  psiImplPackage="org.serenityos.gml.plugin.core.psi"

  elementTypeHolderClass="org.serenityos.gml.plugin.core.psi.GMLTypes"
  elementTypeClass="org.serenityos.gml.plugin.core.psi.GMLElementType"
  tokenTypeClass="org.serenityos.gml.plugin.core.psi.GMLTokenType"
}

root ::= gml
gml ::= object { hooks=[wsBinders="null, null"] }
boolean ::= true | false
value ::= string | number | boolean | array | prop | propdef {hooks=[leftBinder="GREEDY_LEFT_BINDER"]}
object ::= (prop)* {extends=gml}
array ::= brack1 [!brack2 (string comma? | number comma? | boolean comma?) *] brack2
propdef ::= classprefix classname
prop ::= propdef brace1 [!brace2 ((prop | propdef) | (name colon value)) *] brace2
name ::= key | string | {hooks=[rightBinder="GREEDY_RIGHT_BINDER"]}
private recover ::= !(comma | brack2 | brace2 | brack1 | brace1 | dot)